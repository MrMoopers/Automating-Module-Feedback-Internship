{"version":"0.2.0","body":"function main(workbook: ExcelScript.Workbook) {\n\n  let documentName = '\\'Survey Specification.xlsx\\'';\n\n  if (workbook.getWorksheets().length < 3) {\n    //Error too few work sheets. Ensure sheets are ordered \n    // 1. Module Criteria, Mid Module spec, End Module Spec...\n    throw new Error(`\\r\\n\\r\\nToo few worksheets in ${documentName}. Ensure you have a Module Criteria, Mid Module Specification and a End Module Specification in that order.\\r\\n`);\n  }\n\n  if (workbook.getWorksheets()[0].getName() != 'Module Criteria') {\n    //Warning: mismatched name. Ensure sheets are ordered \n    // 1. Module Criteria, Mid Module spec, End Module Spec...\n    console.log(`\\r\\n\\r\\nWarning: 'Module Criteria' sheet naming mismatch in ${documentName}. Ensure you have a Module Criteria, Mid Module Specification and a End Module Specification in that order.\\r\\n`);\n  }\n\n    //----------------------------------\n    //Module Criteria Data\n    //----------------------------------\n    let sheet = workbook.getWorksheets()[0];\n\n    if (sheet.getTables().length == 0) {\n        //error: table not exists\n        throw new Error(`\\r\\n\\r\\nTable does not exist in ${documentName} Table1.\\r\\n`);\n    }\n\n    let table = sheet.getTables()[0];\n    let dataHeaders = table.getHeaderRowRange().getValues();\n    let expectedTableHeaders = ['ModuleId', 'ModuleName', 'ModuleOrganiserEmail', 'Staff1', 'Staff2', 'Staff3', 'Staff4', 'Staff5']\n\n    //Table is the correct size\n    if (dataHeaders[0].length != expectedTableHeaders.length) {\n      throw new Error(`\\r\\n\\r\\nTable has unexpected number of columns in ${documentName} Table1. Has ${dataHeaders[0].length}, Expected ${expectedTableHeaders.length}.\\r\\n`);\n    }\n\n    //Table headers are named correctly\n    for (let i = 0; i < expectedTableHeaders.length;i++)\n    {\n        if (dataHeaders[0][i] != expectedTableHeaders[i]) {\n            //error: table header wrong module id \n            throw new Error(`\\r\\n\\r\\nCannot find Table Header '${expectedTableHeaders[0]}' in column ${i + 1} in ${documentName} Table1.\\r\\n`);\n        }\n    }\n\n    let dataTable = table.getRangeBetweenHeaderAndTotal().getValues();\n\n    for (let i = 0; i < dataTable.length; i++) \n    {\n      for (let j = 0;j<2;j++)\n      {\n        if (dataTable[i][j] == '' || dataTable[i][j] == '') {\n\n          //error: empty row found in table at row i + 1\n          throw new Error(`\\r\\n\\r\\nEmpty value found in Table1 (Row ${i + 2})  in ${documentName}.\\r\\n`);\n        }\n      }\n\n      let emailRegex = \"[a - z0 - 9!#$ %& '*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&' * +/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\";\n      if (dataTable[i][2].toString().match(emailRegex) == null)\n      {\n        throw new Error(`\\r\\n\\r\\nInvalid email address found in Table1 (Row ${i + 2}) in ${documentName}.\\r\\n`);\n      }\n\n      if (dataTable[i][3] == '' && dataTable[i][4] == '' && dataTable[i][5] == '' && dataTable[i][6] == '' && dataTable[i][7] == '')\n      {\n        console.log(`\\r\\n\\r\\nWarning: Empty Staff values found in Table1 (Row ${i + 2})  in ${documentName}.\\r\\n`);\n      }\n    }\n\n  console.log('--> Module Criteria Sheet (Survey Specification) is Valid');\n  //----------------------------------\n  //Mid Module Specification Data\n  //----------------------------------\n  sheet = workbook.getWorksheets()[1];\n\n  if (sheet.getTables().length == 0) {\n    //error: table not exists\n    throw new Error(`\\r\\n\\r\\nTable does not exist in ${documentName} Table2.\\r\\n`);\n  }\n\n  table = sheet.getTables()[0];\n  dataHeaders = table.getHeaderRowRange().getValues();\n  //Table is the correct size\n  if (dataHeaders[0].length != 2) {\n    throw new Error(`\\r\\n\\r\\nTable has unexpected number of columns in ${documentName} Table2. Has ${dataHeaders.length}, Expected 2.\\r\\n`);\n  }\n\n  //Table headers are named correctly\n  if (dataHeaders[0][0] != 'SurveyType') {\n      //error: table header wrong module id \n    throw new Error(`\\r\\n\\r\\nCannot find Table Header 'SurveyType' in column 1 in ${documentName} Table2.\\r\\n`);\n    }\n  //Table headers are named correctly\n  if (dataHeaders[0][1] == '') {\n    //error: table header wrong module id \n    throw new Error(`\\r\\n\\r\\nTable Header Invalid in column 2 in ${documentName} Table2. This is text which will be in the survey's header.\\r\\n`);\n  }\n\n  dataTable = table.getRangeBetweenHeaderAndTotal().getValues();\n\n  let firstQuestionTypes = ['Likert', 'Text'];\n  let secondQuestionTypes = ['Likert-Person', 'Text-Person'];\n  let acceptableQuestionTypes = firstQuestionTypes;\n  let switched = false;\n\n  for (let i = 0; i < dataTable.length; i++) {\n    if (secondQuestionTypes.indexOf(dataTable[i][0].toString()) != -1 && !switched) {\n      switched = true;\n      acceptableQuestionTypes = secondQuestionTypes;\n    }\n\n    if (switched == true && firstQuestionTypes.indexOf(dataTable[i][0].toString()) != -1)\n    {\n      throw new Error(`\\r\\n\\r\\nSurvey Question Type not allowed in Table2 (Row ${i + 2})  in ${documentName}. Ensure you have not added regular questions after the Person questions!\\r\\n`);\n    }\n    if (acceptableQuestionTypes.indexOf(dataTable[i][0].toString()) == -1)  \n    {\n      throw new Error(`\\r\\n\\r\\nSurvey Question Type not recognised in Table2 (Row ${i + 2})  in ${documentName}.\\r\\n`);\n    }\n    else if (dataTable[i][1] == '')\n    {\n      throw new Error(`\\r\\n\\r\\nEmpty Question value found in Table2 (Row ${i + 2})  in ${documentName}.\\r\\n`);\n    }\n  }\n\n  console.log('--> Mid Module Specification Sheet (Survey Specification) is Valid')\n\n  //N.B. all the above code is copied for the End Module Spec. This could be simplified into a loop.\n  //----------------------------------\n  //End Module Specification Data\n  //----------------------------------\n  sheet = workbook.getWorksheets()[2];\n\n  if (sheet.getTables().length == 0) {\n    //error: table not exists\n    throw new Error(`\\r\\n\\r\\nTable does not exist in ${documentName} Table3.\\r\\n`);\n  }\n\n  table = sheet.getTables()[0];\n  dataHeaders = table.getHeaderRowRange().getValues();\n  //Table is the correct size\n  if (dataHeaders[0].length != 2) {\n    throw new Error(`\\r\\n\\r\\nTable has unexpected number of columns in ${documentName} Table3. Has ${dataHeaders.length}, Expected 2.\\r\\n`);\n  }\n\n  //Table headers are named correctly\n  if (dataHeaders[0][0] != 'SurveyType') {\n    //error: table header wrong module id \n    throw new Error(`\\r\\n\\r\\nCannot find Table Header 'SurveyType' in column 1 in ${documentName} Table3.\\r\\n`);\n  }\n  //Table headers are named correctly\n  if (dataHeaders[0][1] == '') {\n    //error: table header wrong module id \n    throw new Error(`\\r\\n\\r\\nTable Header Invalid in column 2 in ${documentName} Table3. This is text which will be in the survey's header.\\r\\n`);\n  }\n\n  dataTable = table.getRangeBetweenHeaderAndTotal().getValues();\n\n  //firstQuestionTypes = ['Likert', 'Text'];\n  //secondQuestionTypes = ['Likert-Person', 'Text-Person'];\n  acceptableQuestionTypes = firstQuestionTypes;\n  switched = false;\n\n  for (let i = 0; i < dataTable.length; i++) {\n    if (secondQuestionTypes.indexOf(dataTable[i][0].toString()) != -1 && !switched) {\n      switched = true;\n      acceptableQuestionTypes = secondQuestionTypes;\n    }\n\n    if (switched == true && firstQuestionTypes.indexOf(dataTable[i][0].toString()) != -1) {\n      throw new Error(`\\r\\n\\r\\nSurvey Question Type not allowed in Table3 (Row ${i + 2})  in ${documentName}. Ensure you have not added regular questions after the Person questions!\\r\\n`);\n    }\n    if (acceptableQuestionTypes.indexOf(dataTable[i][0].toString()) == -1) {\n      throw new Error(`\\r\\n\\r\\nSurvey Question Type not recognised in Table3 (Row ${i + 2})  in ${documentName}.\\r\\n`);\n    }\n    else if (dataTable[i][1] == '') {\n      throw new Error(`\\r\\n\\r\\nEmpty Question value found in Table3 (Row ${i + 2})  in ${documentName}.\\r\\n`);\n    }\n  }\n\n  console.log('--> End Module Specification Sheet (Survey Specification) is Valid')\n\n  return 'Success';\n}","description":"","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{\"result\":{\"type\":\"string\"}}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}